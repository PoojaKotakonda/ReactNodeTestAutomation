name: UI Tests

on:
  push:
    branches: [main]
  pull_request:
  workflow_dispatch:

jobs:
  ui-tests:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Setup JDK 17
      uses: actions/setup-java@v4
      with:
        distribution: temurin
        java-version: 17

    - name: Install Chrome
      uses: browser-actions/setup-chrome@v1
      with:
        chrome-version: stable

    - name: Install ChromeDriver
      uses: nanasess/setup-chromedriver@v2

    - name: Install Backend Dependencies
      working-directory: ./backend
      run: npm install

    - name: Install Frontend Dependencies
      working-directory: ./frontend
      run: npm install

    - name: Run Frontend Tests with Coverage
      working-directory: ./frontend
      run: npm run test:coverage

    - name: Upload Frontend Coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

    - name: Start Backend Server
      working-directory: ./backend
      run: |
        npm start &
        echo $! > ../backend.pid
        timeout 30 bash -c 'until curl -s http://localhost:3001/health >/dev/null 2>&1; do 
          echo "Waiting for backend server..."
          sleep 2
        done'
        echo "Backend server is ready"

    - name: Start Frontend Server
      working-directory: ./frontend
      run: |
        npm start &
        echo $! > ../frontend.pid
        timeout 120 bash -c 'until curl -s http://localhost:3000 | grep -q "html\|HTML\|<!DOCTYPE" || curl -s http://localhost:3000 >/dev/null 2>&1; do 
          echo "Waiting for frontend server..."
          sleep 3
        done'
        echo "Frontend server is ready"

    - name: Debug server status
      run: |
        echo "Checking server status..."
        curl -v http://localhost:3001/health || echo "Backend health check failed"
        curl -v http://localhost:3000 || echo "Frontend check failed"

    - name: Create screenshots directory
      run: |
        mkdir -p tests/ui/target/screenshots
        echo "Screenshots directory created"

    - name: Run UI tests with visual validation
      working-directory: ./tests/ui
      run: |
        echo "Starting UI tests..."
        mvn clean test -X
        echo "UI tests completed"

    - name: List screenshot files
      run: |
        echo "Checking for screenshots..."
        find tests/ui/target -name "*.png" -type f || echo "No PNG files found"
        ls -la tests/ui/target/screenshots/ || echo "Screenshots directory not found"

    - name: Upload screenshots
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-screenshots
        path: |
          tests/ui/target/screenshots/
          tests/ui/target/surefire-reports/
        retention-days: 30
        if-no-files-found: warn

    - name: Upload UI test reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ui-test-reports
        path: tests/ui/target/surefire-reports/
        retention-days: 30
        if-no-files-found: warn

    - name: Stop servers
      if: always()
      run: |
        if [ -f backend.pid ]; then
          kill $(cat backend.pid) || true
          rm backend.pid
        fi
        if [ -f frontend.pid ]; then
          kill $(cat frontend.pid) || true
          rm frontend.pid
        fi